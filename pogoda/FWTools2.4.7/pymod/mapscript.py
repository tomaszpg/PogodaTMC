# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mapscript', [dirname(__file__)])
        except ImportError:
            import _mapscript
            return _mapscript
        if fp is not None:
            try:
                _mod = imp.load_module('_mapscript', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _mapscript = swig_import_helper()
    del swig_import_helper
else:
    import _mapscript
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class intarray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mapscript.new_intarray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_intarray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mapscript.intarray___getitem__(self, *args)
    def __setitem__(self, *args): return _mapscript.intarray___setitem__(self, *args)
    def cast(self): return _mapscript.intarray_cast(self)
    frompointer = staticmethod(_mapscript.intarray_frompointer)
intarray_swigregister = _mapscript.intarray_swigregister
intarray_swigregister(intarray)

def intarray_frompointer(*args):
  return _mapscript.intarray_frompointer(*args)
intarray_frompointer = _mapscript.intarray_frompointer

MapServerError = _mapscript.MapServerError
MapServerChildError = _mapscript.MapServerChildError

MS_VERSION = _mapscript.MS_VERSION
MS_VERSION_MAJOR = _mapscript.MS_VERSION_MAJOR
MS_VERSION_MINOR = _mapscript.MS_VERSION_MINOR
MS_VERSION_REV = _mapscript.MS_VERSION_REV
MS_VERSION_NUM = _mapscript.MS_VERSION_NUM
MS_TRUE = _mapscript.MS_TRUE
MS_FALSE = _mapscript.MS_FALSE
MS_UNKNOWN = _mapscript.MS_UNKNOWN
MS_ON = _mapscript.MS_ON
MS_OFF = _mapscript.MS_OFF
MS_DEFAULT = _mapscript.MS_DEFAULT
MS_EMBED = _mapscript.MS_EMBED
MS_DELETE = _mapscript.MS_DELETE
MS_YES = _mapscript.MS_YES
MS_NO = _mapscript.MS_NO
MS_GD_ALPHA = _mapscript.MS_GD_ALPHA
MS_LAYER_ALLOCSIZE = _mapscript.MS_LAYER_ALLOCSIZE
MS_CLASS_ALLOCSIZE = _mapscript.MS_CLASS_ALLOCSIZE
MS_STYLE_ALLOCSIZE = _mapscript.MS_STYLE_ALLOCSIZE
MS_MAX_LABEL_PRIORITY = _mapscript.MS_MAX_LABEL_PRIORITY
MS_DEFAULT_LABEL_PRIORITY = _mapscript.MS_DEFAULT_LABEL_PRIORITY
MS_FILE_MAP = _mapscript.MS_FILE_MAP
MS_FILE_SYMBOL = _mapscript.MS_FILE_SYMBOL
MS_INCHES = _mapscript.MS_INCHES
MS_FEET = _mapscript.MS_FEET
MS_MILES = _mapscript.MS_MILES
MS_METERS = _mapscript.MS_METERS
MS_KILOMETERS = _mapscript.MS_KILOMETERS
MS_NAUTICALMILES = _mapscript.MS_NAUTICALMILES
MS_DD = _mapscript.MS_DD
MS_PIXELS = _mapscript.MS_PIXELS
MS_PERCENTAGES = _mapscript.MS_PERCENTAGES
MS_SHAPE_POINT = _mapscript.MS_SHAPE_POINT
MS_SHAPE_LINE = _mapscript.MS_SHAPE_LINE
MS_SHAPE_POLYGON = _mapscript.MS_SHAPE_POLYGON
MS_SHAPE_NULL = _mapscript.MS_SHAPE_NULL
MS_LAYER_POINT = _mapscript.MS_LAYER_POINT
MS_LAYER_LINE = _mapscript.MS_LAYER_LINE
MS_LAYER_POLYGON = _mapscript.MS_LAYER_POLYGON
MS_LAYER_RASTER = _mapscript.MS_LAYER_RASTER
MS_LAYER_ANNOTATION = _mapscript.MS_LAYER_ANNOTATION
MS_LAYER_QUERY = _mapscript.MS_LAYER_QUERY
MS_LAYER_CIRCLE = _mapscript.MS_LAYER_CIRCLE
MS_LAYER_TILEINDEX = _mapscript.MS_LAYER_TILEINDEX
MS_LAYER_CHART = _mapscript.MS_LAYER_CHART
MS_TRUETYPE = _mapscript.MS_TRUETYPE
MS_BITMAP = _mapscript.MS_BITMAP
MS_POSITIONS_LENGTH = _mapscript.MS_POSITIONS_LENGTH
MS_UL = _mapscript.MS_UL
MS_LR = _mapscript.MS_LR
MS_UR = _mapscript.MS_UR
MS_LL = _mapscript.MS_LL
MS_CR = _mapscript.MS_CR
MS_CL = _mapscript.MS_CL
MS_UC = _mapscript.MS_UC
MS_LC = _mapscript.MS_LC
MS_CC = _mapscript.MS_CC
MS_AUTO = _mapscript.MS_AUTO
MS_XY = _mapscript.MS_XY
MS_FOLLOW = _mapscript.MS_FOLLOW
MS_TINY = _mapscript.MS_TINY
MS_SMALL = _mapscript.MS_SMALL
MS_MEDIUM = _mapscript.MS_MEDIUM
MS_LARGE = _mapscript.MS_LARGE
MS_GIANT = _mapscript.MS_GIANT
MS_NORMAL = _mapscript.MS_NORMAL
MS_HILITE = _mapscript.MS_HILITE
MS_SELECTED = _mapscript.MS_SELECTED
MS_INLINE = _mapscript.MS_INLINE
MS_SHAPEFILE = _mapscript.MS_SHAPEFILE
MS_TILED_SHAPEFILE = _mapscript.MS_TILED_SHAPEFILE
MS_SDE = _mapscript.MS_SDE
MS_OGR = _mapscript.MS_OGR
MS_UNUSED_1 = _mapscript.MS_UNUSED_1
MS_POSTGIS = _mapscript.MS_POSTGIS
MS_WMS = _mapscript.MS_WMS
MS_ORACLESPATIAL = _mapscript.MS_ORACLESPATIAL
MS_WFS = _mapscript.MS_WFS
MS_GRATICULE = _mapscript.MS_GRATICULE
MS_MYGIS = _mapscript.MS_MYGIS
MS_RASTER = _mapscript.MS_RASTER
MS_PLUGIN = _mapscript.MS_PLUGIN
MS_DB_XBASE = _mapscript.MS_DB_XBASE
MS_DB_CSV = _mapscript.MS_DB_CSV
MS_DB_MYSQL = _mapscript.MS_DB_MYSQL
MS_DB_ORACLE = _mapscript.MS_DB_ORACLE
MS_DB_POSTGRES = _mapscript.MS_DB_POSTGRES
MS_JOIN_ONE_TO_ONE = _mapscript.MS_JOIN_ONE_TO_ONE
MS_JOIN_ONE_TO_MANY = _mapscript.MS_JOIN_ONE_TO_MANY
MS_SINGLE = _mapscript.MS_SINGLE
MS_MULTIPLE = _mapscript.MS_MULTIPLE
MS_QUERY_SINGLE = _mapscript.MS_QUERY_SINGLE
MS_QUERY_MULTIPLE = _mapscript.MS_QUERY_MULTIPLE
MS_QUERY_IS_NULL = _mapscript.MS_QUERY_IS_NULL
MS_QUERY_BY_POINT = _mapscript.MS_QUERY_BY_POINT
MS_QUERY_BY_RECT = _mapscript.MS_QUERY_BY_RECT
MS_QUERY_BY_SHAPE = _mapscript.MS_QUERY_BY_SHAPE
MS_QUERY_BY_ATTRIBUTE = _mapscript.MS_QUERY_BY_ATTRIBUTE
MS_QUERY_BY_INDEX = _mapscript.MS_QUERY_BY_INDEX
MS_QUERY_BY_OPERATOR = _mapscript.MS_QUERY_BY_OPERATOR
MS_ALIGN_LEFT = _mapscript.MS_ALIGN_LEFT
MS_ALIGN_CENTER = _mapscript.MS_ALIGN_CENTER
MS_ALIGN_RIGHT = _mapscript.MS_ALIGN_RIGHT
MS_CJC_NONE = _mapscript.MS_CJC_NONE
MS_CJC_BEVEL = _mapscript.MS_CJC_BEVEL
MS_CJC_BUTT = _mapscript.MS_CJC_BUTT
MS_CJC_MITER = _mapscript.MS_CJC_MITER
MS_CJC_ROUND = _mapscript.MS_CJC_ROUND
MS_CJC_SQUARE = _mapscript.MS_CJC_SQUARE
MS_CJC_TRIANGLE = _mapscript.MS_CJC_TRIANGLE
MS_SUCCESS = _mapscript.MS_SUCCESS
MS_FAILURE = _mapscript.MS_FAILURE
MS_DONE = _mapscript.MS_DONE
MS_IMAGEMODE_PC256 = _mapscript.MS_IMAGEMODE_PC256
MS_IMAGEMODE_RGB = _mapscript.MS_IMAGEMODE_RGB
MS_IMAGEMODE_RGBA = _mapscript.MS_IMAGEMODE_RGBA
MS_IMAGEMODE_INT16 = _mapscript.MS_IMAGEMODE_INT16
MS_IMAGEMODE_FLOAT32 = _mapscript.MS_IMAGEMODE_FLOAT32
MS_IMAGEMODE_BYTE = _mapscript.MS_IMAGEMODE_BYTE
MS_IMAGEMODE_NULL = _mapscript.MS_IMAGEMODE_NULL
MS_GEOS_EQUALS = _mapscript.MS_GEOS_EQUALS
MS_GEOS_DISJOINT = _mapscript.MS_GEOS_DISJOINT
MS_GEOS_TOUCHES = _mapscript.MS_GEOS_TOUCHES
MS_GEOS_OVERLAPS = _mapscript.MS_GEOS_OVERLAPS
MS_GEOS_CROSSES = _mapscript.MS_GEOS_CROSSES
MS_GEOS_INTERSECTS = _mapscript.MS_GEOS_INTERSECTS
MS_GEOS_WITHIN = _mapscript.MS_GEOS_WITHIN
MS_GEOS_CONTAINS = _mapscript.MS_GEOS_CONTAINS
MS_GEOS_BEYOND = _mapscript.MS_GEOS_BEYOND
MS_GEOS_DWITHIN = _mapscript.MS_GEOS_DWITHIN
class fontSetObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    filename = _swig_property(_mapscript.fontSetObj_filename_get)
    numfonts = _swig_property(_mapscript.fontSetObj_numfonts_get)
    fonts = _swig_property(_mapscript.fontSetObj_fonts_get)
    def __init__(self): 
        this = _mapscript.new_fontSetObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_fontSetObj
    __del__ = lambda self : None;
fontSetObj_swigregister = _mapscript.fontSetObj_swigregister
fontSetObj_swigregister(fontSetObj)

class outputFormatObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_mapscript.outputFormatObj_name_get, _mapscript.outputFormatObj_name_set)
    mimetype = _swig_property(_mapscript.outputFormatObj_mimetype_get, _mapscript.outputFormatObj_mimetype_set)
    driver = _swig_property(_mapscript.outputFormatObj_driver_get, _mapscript.outputFormatObj_driver_set)
    extension = _swig_property(_mapscript.outputFormatObj_extension_get, _mapscript.outputFormatObj_extension_set)
    renderer = _swig_property(_mapscript.outputFormatObj_renderer_get, _mapscript.outputFormatObj_renderer_set)
    imagemode = _swig_property(_mapscript.outputFormatObj_imagemode_get, _mapscript.outputFormatObj_imagemode_set)
    transparent = _swig_property(_mapscript.outputFormatObj_transparent_get, _mapscript.outputFormatObj_transparent_set)
    bands = _swig_property(_mapscript.outputFormatObj_bands_get, _mapscript.outputFormatObj_bands_set)
    numformatoptions = _swig_property(_mapscript.outputFormatObj_numformatoptions_get, _mapscript.outputFormatObj_numformatoptions_set)
    formatoptions = _swig_property(_mapscript.outputFormatObj_formatoptions_get, _mapscript.outputFormatObj_formatoptions_set)
    refcount = _swig_property(_mapscript.outputFormatObj_refcount_get, _mapscript.outputFormatObj_refcount_set)
    inmapfile = _swig_property(_mapscript.outputFormatObj_inmapfile_get, _mapscript.outputFormatObj_inmapfile_set)
    vtable = _swig_property(_mapscript.outputFormatObj_vtable_get, _mapscript.outputFormatObj_vtable_set)
    def __init__(self, *args): 
        this = _mapscript.new_outputFormatObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_outputFormatObj
    __del__ = lambda self : None;
    def setExtension(self, *args): return _mapscript.outputFormatObj_setExtension(self, *args)
    def setMimetype(self, *args): return _mapscript.outputFormatObj_setMimetype(self, *args)
    def setOption(self, *args): return _mapscript.outputFormatObj_setOption(self, *args)
    def validate(self): return _mapscript.outputFormatObj_validate(self)
    def getOption(self, *args): return _mapscript.outputFormatObj_getOption(self, *args)
outputFormatObj_swigregister = _mapscript.outputFormatObj_swigregister
outputFormatObj_swigregister(outputFormatObj)

MS_NOOVERRIDE = _mapscript.MS_NOOVERRIDE
class queryMapObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    height = _swig_property(_mapscript.queryMapObj_height_get, _mapscript.queryMapObj_height_set)
    width = _swig_property(_mapscript.queryMapObj_width_get, _mapscript.queryMapObj_width_set)
    status = _swig_property(_mapscript.queryMapObj_status_get, _mapscript.queryMapObj_status_set)
    style = _swig_property(_mapscript.queryMapObj_style_get, _mapscript.queryMapObj_style_set)
    color = _swig_property(_mapscript.queryMapObj_color_get, _mapscript.queryMapObj_color_set)
    def updateFromString(self, *args): return _mapscript.queryMapObj_updateFromString(self, *args)
    def __init__(self): 
        this = _mapscript.new_queryMapObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_queryMapObj
    __del__ = lambda self : None;
queryMapObj_swigregister = _mapscript.queryMapObj_swigregister
queryMapObj_swigregister(queryMapObj)

MS_STYLE_BINDING_LENGTH = _mapscript.MS_STYLE_BINDING_LENGTH
MS_STYLE_BINDING_SIZE = _mapscript.MS_STYLE_BINDING_SIZE
MS_STYLE_BINDING_WIDTH = _mapscript.MS_STYLE_BINDING_WIDTH
MS_STYLE_BINDING_ANGLE = _mapscript.MS_STYLE_BINDING_ANGLE
MS_STYLE_BINDING_COLOR = _mapscript.MS_STYLE_BINDING_COLOR
MS_STYLE_BINDING_OUTLINECOLOR = _mapscript.MS_STYLE_BINDING_OUTLINECOLOR
MS_STYLE_BINDING_SYMBOL = _mapscript.MS_STYLE_BINDING_SYMBOL
MS_STYLE_BINDING_OUTLINEWIDTH = _mapscript.MS_STYLE_BINDING_OUTLINEWIDTH
MS_STYLE_BINDING_OPACITY = _mapscript.MS_STYLE_BINDING_OPACITY
MS_LABEL_BINDING_LENGTH = _mapscript.MS_LABEL_BINDING_LENGTH
MS_LABEL_BINDING_SIZE = _mapscript.MS_LABEL_BINDING_SIZE
MS_LABEL_BINDING_ANGLE = _mapscript.MS_LABEL_BINDING_ANGLE
MS_LABEL_BINDING_COLOR = _mapscript.MS_LABEL_BINDING_COLOR
MS_LABEL_BINDING_OUTLINECOLOR = _mapscript.MS_LABEL_BINDING_OUTLINECOLOR
MS_LABEL_BINDING_FONT = _mapscript.MS_LABEL_BINDING_FONT
MS_LABEL_BINDING_PRIORITY = _mapscript.MS_LABEL_BINDING_PRIORITY
class labelObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    font = _swig_property(_mapscript.labelObj_font_get, _mapscript.labelObj_font_set)
    type = _swig_property(_mapscript.labelObj_type_get, _mapscript.labelObj_type_set)
    color = _swig_property(_mapscript.labelObj_color_get, _mapscript.labelObj_color_set)
    outlinecolor = _swig_property(_mapscript.labelObj_outlinecolor_get, _mapscript.labelObj_outlinecolor_set)
    outlinewidth = _swig_property(_mapscript.labelObj_outlinewidth_get, _mapscript.labelObj_outlinewidth_set)
    shadowcolor = _swig_property(_mapscript.labelObj_shadowcolor_get, _mapscript.labelObj_shadowcolor_set)
    shadowsizex = _swig_property(_mapscript.labelObj_shadowsizex_get, _mapscript.labelObj_shadowsizex_set)
    shadowsizey = _swig_property(_mapscript.labelObj_shadowsizey_get, _mapscript.labelObj_shadowsizey_set)
    backgroundcolor = _swig_property(_mapscript.labelObj_backgroundcolor_get, _mapscript.labelObj_backgroundcolor_set)
    backgroundshadowcolor = _swig_property(_mapscript.labelObj_backgroundshadowcolor_get, _mapscript.labelObj_backgroundshadowcolor_set)
    backgroundshadowsizex = _swig_property(_mapscript.labelObj_backgroundshadowsizex_get, _mapscript.labelObj_backgroundshadowsizex_set)
    backgroundshadowsizey = _swig_property(_mapscript.labelObj_backgroundshadowsizey_get, _mapscript.labelObj_backgroundshadowsizey_set)
    size = _swig_property(_mapscript.labelObj_size_get, _mapscript.labelObj_size_set)
    minsize = _swig_property(_mapscript.labelObj_minsize_get, _mapscript.labelObj_minsize_set)
    maxsize = _swig_property(_mapscript.labelObj_maxsize_get, _mapscript.labelObj_maxsize_set)
    position = _swig_property(_mapscript.labelObj_position_get, _mapscript.labelObj_position_set)
    offsetx = _swig_property(_mapscript.labelObj_offsetx_get, _mapscript.labelObj_offsetx_set)
    offsety = _swig_property(_mapscript.labelObj_offsety_get, _mapscript.labelObj_offsety_set)
    angle = _swig_property(_mapscript.labelObj_angle_get, _mapscript.labelObj_angle_set)
    autoangle = _swig_property(_mapscript.labelObj_autoangle_get, _mapscript.labelObj_autoangle_set)
    autofollow = _swig_property(_mapscript.labelObj_autofollow_get, _mapscript.labelObj_autofollow_set)
    buffer = _swig_property(_mapscript.labelObj_buffer_get, _mapscript.labelObj_buffer_set)
    antialias = _swig_property(_mapscript.labelObj_antialias_get, _mapscript.labelObj_antialias_set)
    align = _swig_property(_mapscript.labelObj_align_get, _mapscript.labelObj_align_set)
    wrap = _swig_property(_mapscript.labelObj_wrap_get, _mapscript.labelObj_wrap_set)
    maxlength = _swig_property(_mapscript.labelObj_maxlength_get, _mapscript.labelObj_maxlength_set)
    minlength = _swig_property(_mapscript.labelObj_minlength_get, _mapscript.labelObj_minlength_set)
    space_size_10 = _swig_property(_mapscript.labelObj_space_size_10_get, _mapscript.labelObj_space_size_10_set)
    minfeaturesize = _swig_property(_mapscript.labelObj_minfeaturesize_get, _mapscript.labelObj_minfeaturesize_set)
    autominfeaturesize = _swig_property(_mapscript.labelObj_autominfeaturesize_get, _mapscript.labelObj_autominfeaturesize_set)
    minscaledenom = _swig_property(_mapscript.labelObj_minscaledenom_get, _mapscript.labelObj_minscaledenom_set)
    maxscaledenom = _swig_property(_mapscript.labelObj_maxscaledenom_get, _mapscript.labelObj_maxscaledenom_set)
    mindistance = _swig_property(_mapscript.labelObj_mindistance_get, _mapscript.labelObj_mindistance_set)
    repeatdistance = _swig_property(_mapscript.labelObj_repeatdistance_get, _mapscript.labelObj_repeatdistance_set)
    partials = _swig_property(_mapscript.labelObj_partials_get, _mapscript.labelObj_partials_set)
    force = _swig_property(_mapscript.labelObj_force_get, _mapscript.labelObj_force_set)
    encoding = _swig_property(_mapscript.labelObj_encoding_get, _mapscript.labelObj_encoding_set)
    priority = _swig_property(_mapscript.labelObj_priority_get, _mapscript.labelObj_priority_set)
    def updateFromString(self, *args): return _mapscript.labelObj_updateFromString(self, *args)
    def removeBinding(self, *args): return _mapscript.labelObj_removeBinding(self, *args)
    def getBinding(self, *args): return _mapscript.labelObj_getBinding(self, *args)
    def setBinding(self, *args): return _mapscript.labelObj_setBinding(self, *args)
    def __init__(self): 
        this = _mapscript.new_labelObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelObj
    __del__ = lambda self : None;
labelObj_swigregister = _mapscript.labelObj_swigregister
labelObj_swigregister(labelObj)

class webObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    log = _swig_property(_mapscript.webObj_log_get, _mapscript.webObj_log_set)
    imagepath = _swig_property(_mapscript.webObj_imagepath_get, _mapscript.webObj_imagepath_set)
    imageurl = _swig_property(_mapscript.webObj_imageurl_get, _mapscript.webObj_imageurl_set)
    map = _swig_property(_mapscript.webObj_map_get)
    template = _swig_property(_mapscript.webObj_template_get, _mapscript.webObj_template_set)
    header = _swig_property(_mapscript.webObj_header_get, _mapscript.webObj_header_set)
    footer = _swig_property(_mapscript.webObj_footer_get, _mapscript.webObj_footer_set)
    empty = _swig_property(_mapscript.webObj_empty_get, _mapscript.webObj_empty_set)
    error = _swig_property(_mapscript.webObj_error_get, _mapscript.webObj_error_set)
    extent = _swig_property(_mapscript.webObj_extent_get, _mapscript.webObj_extent_set)
    minscaledenom = _swig_property(_mapscript.webObj_minscaledenom_get, _mapscript.webObj_minscaledenom_set)
    maxscaledenom = _swig_property(_mapscript.webObj_maxscaledenom_get, _mapscript.webObj_maxscaledenom_set)
    mintemplate = _swig_property(_mapscript.webObj_mintemplate_get, _mapscript.webObj_mintemplate_set)
    maxtemplate = _swig_property(_mapscript.webObj_maxtemplate_get, _mapscript.webObj_maxtemplate_set)
    queryformat = _swig_property(_mapscript.webObj_queryformat_get, _mapscript.webObj_queryformat_set)
    legendformat = _swig_property(_mapscript.webObj_legendformat_get, _mapscript.webObj_legendformat_set)
    browseformat = _swig_property(_mapscript.webObj_browseformat_get, _mapscript.webObj_browseformat_set)
    metadata = _swig_property(_mapscript.webObj_metadata_get)
    validation = _swig_property(_mapscript.webObj_validation_get)
    def __init__(self): 
        this = _mapscript.new_webObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_webObj
    __del__ = lambda self : None;
    def updateFromString(self, *args): return _mapscript.webObj_updateFromString(self, *args)
webObj_swigregister = _mapscript.webObj_swigregister
webObj_swigregister(webObj)

class styleObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    refcount = _swig_property(_mapscript.styleObj_refcount_get)
    autoangle = _swig_property(_mapscript.styleObj_autoangle_get, _mapscript.styleObj_autoangle_set)
    color = _swig_property(_mapscript.styleObj_color_get, _mapscript.styleObj_color_set)
    backgroundcolor = _swig_property(_mapscript.styleObj_backgroundcolor_get, _mapscript.styleObj_backgroundcolor_set)
    outlinecolor = _swig_property(_mapscript.styleObj_outlinecolor_get, _mapscript.styleObj_outlinecolor_set)
    opacity = _swig_property(_mapscript.styleObj_opacity_get, _mapscript.styleObj_opacity_set)
    mincolor = _swig_property(_mapscript.styleObj_mincolor_get, _mapscript.styleObj_mincolor_set)
    maxcolor = _swig_property(_mapscript.styleObj_maxcolor_get, _mapscript.styleObj_maxcolor_set)
    minvalue = _swig_property(_mapscript.styleObj_minvalue_get, _mapscript.styleObj_minvalue_set)
    maxvalue = _swig_property(_mapscript.styleObj_maxvalue_get, _mapscript.styleObj_maxvalue_set)
    rangeitem = _swig_property(_mapscript.styleObj_rangeitem_get, _mapscript.styleObj_rangeitem_set)
    rangeitemindex = _swig_property(_mapscript.styleObj_rangeitemindex_get, _mapscript.styleObj_rangeitemindex_set)
    symbol = _swig_property(_mapscript.styleObj_symbol_get, _mapscript.styleObj_symbol_set)
    symbolname = _swig_property(_mapscript.styleObj_symbolname_get, _mapscript.styleObj_symbolname_set)
    size = _swig_property(_mapscript.styleObj_size_get, _mapscript.styleObj_size_set)
    minsize = _swig_property(_mapscript.styleObj_minsize_get, _mapscript.styleObj_minsize_set)
    maxsize = _swig_property(_mapscript.styleObj_maxsize_get, _mapscript.styleObj_maxsize_set)
    patternlength = _swig_property(_mapscript.styleObj_patternlength_get, _mapscript.styleObj_patternlength_set)
    pattern = _swig_property(_mapscript.styleObj_pattern_get, _mapscript.styleObj_pattern_set)
    gap = _swig_property(_mapscript.styleObj_gap_get, _mapscript.styleObj_gap_set)
    position = _swig_property(_mapscript.styleObj_position_get, _mapscript.styleObj_position_set)
    linecap = _swig_property(_mapscript.styleObj_linecap_get, _mapscript.styleObj_linecap_set)
    linejoin = _swig_property(_mapscript.styleObj_linejoin_get, _mapscript.styleObj_linejoin_set)
    linejoinmaxsize = _swig_property(_mapscript.styleObj_linejoinmaxsize_get, _mapscript.styleObj_linejoinmaxsize_set)
    width = _swig_property(_mapscript.styleObj_width_get, _mapscript.styleObj_width_set)
    outlinewidth = _swig_property(_mapscript.styleObj_outlinewidth_get, _mapscript.styleObj_outlinewidth_set)
    minwidth = _swig_property(_mapscript.styleObj_minwidth_get, _mapscript.styleObj_minwidth_set)
    maxwidth = _swig_property(_mapscript.styleObj_maxwidth_get, _mapscript.styleObj_maxwidth_set)
    offsetx = _swig_property(_mapscript.styleObj_offsetx_get, _mapscript.styleObj_offsetx_set)
    offsety = _swig_property(_mapscript.styleObj_offsety_get, _mapscript.styleObj_offsety_set)
    angle = _swig_property(_mapscript.styleObj_angle_get, _mapscript.styleObj_angle_set)
    antialias = _swig_property(_mapscript.styleObj_antialias_get, _mapscript.styleObj_antialias_set)
    minscaledenom = _swig_property(_mapscript.styleObj_minscaledenom_get, _mapscript.styleObj_minscaledenom_set)
    maxscaledenom = _swig_property(_mapscript.styleObj_maxscaledenom_get, _mapscript.styleObj_maxscaledenom_set)
    def __init__(self, parent_class = None): 
        this = _mapscript.new_styleObj(parent_class)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_styleObj
    __del__ = lambda self : None;
    def updateFromString(self, *args): return _mapscript.styleObj_updateFromString(self, *args)
    def clone(self): return _mapscript.styleObj_clone(self)
    def setSymbolByName(self, *args): return _mapscript.styleObj_setSymbolByName(self, *args)
    def removeBinding(self, *args): return _mapscript.styleObj_removeBinding(self, *args)
    def setBinding(self, *args): return _mapscript.styleObj_setBinding(self, *args)
    def getBinding(self, *args): return _mapscript.styleObj_getBinding(self, *args)
    def getGeomTransform(self): return _mapscript.styleObj_getGeomTransform(self)
    def setGeomTransform(self, *args): return _mapscript.styleObj_setGeomTransform(self, *args)
styleObj_swigregister = _mapscript.styleObj_swigregister
styleObj_swigregister(styleObj)

class classObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    status = _swig_property(_mapscript.classObj_status_get, _mapscript.classObj_status_set)
    numstyles = _swig_property(_mapscript.classObj_numstyles_get, _mapscript.classObj_numstyles_set)
    label = _swig_property(_mapscript.classObj_label_get)
    name = _swig_property(_mapscript.classObj_name_get, _mapscript.classObj_name_set)
    title = _swig_property(_mapscript.classObj_title_get, _mapscript.classObj_title_set)
    template = _swig_property(_mapscript.classObj_template_get, _mapscript.classObj_template_set)
    type = _swig_property(_mapscript.classObj_type_get, _mapscript.classObj_type_set)
    metadata = _swig_property(_mapscript.classObj_metadata_get)
    validation = _swig_property(_mapscript.classObj_validation_get)
    minscaledenom = _swig_property(_mapscript.classObj_minscaledenom_get, _mapscript.classObj_minscaledenom_set)
    maxscaledenom = _swig_property(_mapscript.classObj_maxscaledenom_get, _mapscript.classObj_maxscaledenom_set)
    refcount = _swig_property(_mapscript.classObj_refcount_get)
    layer = _swig_property(_mapscript.classObj_layer_get)
    debug = _swig_property(_mapscript.classObj_debug_get, _mapscript.classObj_debug_set)
    keyimage = _swig_property(_mapscript.classObj_keyimage_get, _mapscript.classObj_keyimage_set)
    group = _swig_property(_mapscript.classObj_group_get, _mapscript.classObj_group_set)
    def __init__(self, layer = None): 
        this = _mapscript.new_classObj(layer)
        try: self.this.append(this)
        except: self.this = this
        if 1:
        	   if args and len(args)!=0:
        		self.p_layer=args[0]
        	   else:
        		self.p_layer=None


    __swig_destroy__ = _mapscript.delete_classObj
    __del__ = lambda self : None;
    def updateFromString(self, *args): return _mapscript.classObj_updateFromString(self, *args)
    def clone(self): return _mapscript.classObj_clone(self)
    def setExpression(self, *args): return _mapscript.classObj_setExpression(self, *args)
    def getExpressionString(self): return _mapscript.classObj_getExpressionString(self)
    def setText(self, *args): return _mapscript.classObj_setText(self, *args)
    def getTextString(self): return _mapscript.classObj_getTextString(self)
    def getMetaData(self, *args): return _mapscript.classObj_getMetaData(self, *args)
    def setMetaData(self, *args): return _mapscript.classObj_setMetaData(self, *args)
    def getFirstMetaDataKey(self): return _mapscript.classObj_getFirstMetaDataKey(self)
    def getNextMetaDataKey(self, *args): return _mapscript.classObj_getNextMetaDataKey(self, *args)
    def drawLegendIcon(self, *args): return _mapscript.classObj_drawLegendIcon(self, *args)
    def createLegendIcon(self, *args): return _mapscript.classObj_createLegendIcon(self, *args)
    def getStyle(self, *args): return _mapscript.classObj_getStyle(self, *args)
    def insertStyle(self, *args): return _mapscript.classObj_insertStyle(self, *args)
    def removeStyle(self, *args): return _mapscript.classObj_removeStyle(self, *args)
    def moveStyleUp(self, *args): return _mapscript.classObj_moveStyleUp(self, *args)
    def moveStyleDown(self, *args): return _mapscript.classObj_moveStyleDown(self, *args)
classObj_swigregister = _mapscript.classObj_swigregister
classObj_swigregister(classObj)

class labelCacheMemberObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    text = _swig_property(_mapscript.labelCacheMemberObj_text_get)
    featuresize = _swig_property(_mapscript.labelCacheMemberObj_featuresize_get)
    styles = _swig_property(_mapscript.labelCacheMemberObj_styles_get)
    numstyles = _swig_property(_mapscript.labelCacheMemberObj_numstyles_get)
    label = _swig_property(_mapscript.labelCacheMemberObj_label_get)
    layerindex = _swig_property(_mapscript.labelCacheMemberObj_layerindex_get)
    classindex = _swig_property(_mapscript.labelCacheMemberObj_classindex_get)
    tileindex = _swig_property(_mapscript.labelCacheMemberObj_tileindex_get)
    shapeindex = _swig_property(_mapscript.labelCacheMemberObj_shapeindex_get)
    shapetype = _swig_property(_mapscript.labelCacheMemberObj_shapetype_get)
    point = _swig_property(_mapscript.labelCacheMemberObj_point_get)
    poly = _swig_property(_mapscript.labelCacheMemberObj_poly_get)
    status = _swig_property(_mapscript.labelCacheMemberObj_status_get)
    def __init__(self): 
        this = _mapscript.new_labelCacheMemberObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelCacheMemberObj
    __del__ = lambda self : None;
labelCacheMemberObj_swigregister = _mapscript.labelCacheMemberObj_swigregister
labelCacheMemberObj_swigregister(labelCacheMemberObj)

class markerCacheMemberObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_mapscript.markerCacheMemberObj_id_get)
    poly = _swig_property(_mapscript.markerCacheMemberObj_poly_get)
    def __init__(self): 
        this = _mapscript.new_markerCacheMemberObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_markerCacheMemberObj
    __del__ = lambda self : None;
markerCacheMemberObj_swigregister = _mapscript.markerCacheMemberObj_swigregister
markerCacheMemberObj_swigregister(markerCacheMemberObj)

class labelCacheSlotObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    labels = _swig_property(_mapscript.labelCacheSlotObj_labels_get)
    numlabels = _swig_property(_mapscript.labelCacheSlotObj_numlabels_get)
    cachesize = _swig_property(_mapscript.labelCacheSlotObj_cachesize_get)
    markers = _swig_property(_mapscript.labelCacheSlotObj_markers_get)
    nummarkers = _swig_property(_mapscript.labelCacheSlotObj_nummarkers_get)
    markercachesize = _swig_property(_mapscript.labelCacheSlotObj_markercachesize_get)
    def __init__(self): 
        this = _mapscript.new_labelCacheSlotObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelCacheSlotObj
    __del__ = lambda self : None;
labelCacheSlotObj_swigregister = _mapscript.labelCacheSlotObj_swigregister
labelCacheSlotObj_swigregister(labelCacheSlotObj)

class labelCacheObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    slots = _swig_property(_mapscript.labelCacheObj_slots_get)
    numlabels = _swig_property(_mapscript.labelCacheObj_numlabels_get)
    def freeCache(self): return _mapscript.labelCacheObj_freeCache(self)
    def __init__(self): 
        this = _mapscript.new_labelCacheObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelCacheObj
    __del__ = lambda self : None;
labelCacheObj_swigregister = _mapscript.labelCacheObj_swigregister
labelCacheObj_swigregister(labelCacheObj)

class resultCacheMemberObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    shapeindex = _swig_property(_mapscript.resultCacheMemberObj_shapeindex_get)
    tileindex = _swig_property(_mapscript.resultCacheMemberObj_tileindex_get)
    classindex = _swig_property(_mapscript.resultCacheMemberObj_classindex_get)
    def __init__(self): 
        this = _mapscript.new_resultCacheMemberObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_resultCacheMemberObj
    __del__ = lambda self : None;
resultCacheMemberObj_swigregister = _mapscript.resultCacheMemberObj_swigregister
resultCacheMemberObj_swigregister(resultCacheMemberObj)

class resultCacheObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    numresults = _swig_property(_mapscript.resultCacheObj_numresults_get)
    bounds = _swig_property(_mapscript.resultCacheObj_bounds_get)
    def getResult(self, *args): return _mapscript.resultCacheObj_getResult(self, *args)
    def __init__(self): 
        this = _mapscript.new_resultCacheObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_resultCacheObj
    __del__ = lambda self : None;
resultCacheObj_swigregister = _mapscript.resultCacheObj_swigregister
resultCacheObj_swigregister(resultCacheObj)

class symbolSetObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    filename = _swig_property(_mapscript.symbolSetObj_filename_get, _mapscript.symbolSetObj_filename_set)
    imagecachesize = _swig_property(_mapscript.symbolSetObj_imagecachesize_get, _mapscript.symbolSetObj_imagecachesize_set)
    numsymbols = _swig_property(_mapscript.symbolSetObj_numsymbols_get)
    maxsymbols = _swig_property(_mapscript.symbolSetObj_maxsymbols_get)
    def __init__(self, symbolfile = None): 
        this = _mapscript.new_symbolSetObj(symbolfile)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_symbolSetObj
    __del__ = lambda self : None;
    def getSymbol(self, *args): return _mapscript.symbolSetObj_getSymbol(self, *args)
    def getSymbolByName(self, *args): return _mapscript.symbolSetObj_getSymbolByName(self, *args)
    def index(self, *args): return _mapscript.symbolSetObj_index(self, *args)
    def appendSymbol(self, *args): return _mapscript.symbolSetObj_appendSymbol(self, *args)
    def removeSymbol(self, *args): return _mapscript.symbolSetObj_removeSymbol(self, *args)
    def save(self, *args): return _mapscript.symbolSetObj_save(self, *args)
symbolSetObj_swigregister = _mapscript.symbolSetObj_swigregister
symbolSetObj_swigregister(symbolSetObj)

class referenceMapObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    extent = _swig_property(_mapscript.referenceMapObj_extent_get, _mapscript.referenceMapObj_extent_set)
    height = _swig_property(_mapscript.referenceMapObj_height_get, _mapscript.referenceMapObj_height_set)
    width = _swig_property(_mapscript.referenceMapObj_width_get, _mapscript.referenceMapObj_width_set)
    color = _swig_property(_mapscript.referenceMapObj_color_get, _mapscript.referenceMapObj_color_set)
    outlinecolor = _swig_property(_mapscript.referenceMapObj_outlinecolor_get, _mapscript.referenceMapObj_outlinecolor_set)
    image = _swig_property(_mapscript.referenceMapObj_image_get, _mapscript.referenceMapObj_image_set)
    status = _swig_property(_mapscript.referenceMapObj_status_get, _mapscript.referenceMapObj_status_set)
    marker = _swig_property(_mapscript.referenceMapObj_marker_get, _mapscript.referenceMapObj_marker_set)
    markername = _swig_property(_mapscript.referenceMapObj_markername_get, _mapscript.referenceMapObj_markername_set)
    markersize = _swig_property(_mapscript.referenceMapObj_markersize_get, _mapscript.referenceMapObj_markersize_set)
    minboxsize = _swig_property(_mapscript.referenceMapObj_minboxsize_get, _mapscript.referenceMapObj_minboxsize_set)
    maxboxsize = _swig_property(_mapscript.referenceMapObj_maxboxsize_get, _mapscript.referenceMapObj_maxboxsize_set)
    map = _swig_property(_mapscript.referenceMapObj_map_get)
    def updateFromString(self, *args): return _mapscript.referenceMapObj_updateFromString(self, *args)
    def __init__(self): 
        this = _mapscript.new_referenceMapObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_referenceMapObj
    __del__ = lambda self : None;
referenceMapObj_swigregister = _mapscript.referenceMapObj_swigregister
referenceMapObj_swigregister(referenceMapObj)

class scalebarObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    imagecolor = _swig_property(_mapscript.scalebarObj_imagecolor_get, _mapscript.scalebarObj_imagecolor_set)
    height = _swig_property(_mapscript.scalebarObj_height_get, _mapscript.scalebarObj_height_set)
    width = _swig_property(_mapscript.scalebarObj_width_get, _mapscript.scalebarObj_width_set)
    style = _swig_property(_mapscript.scalebarObj_style_get, _mapscript.scalebarObj_style_set)
    intervals = _swig_property(_mapscript.scalebarObj_intervals_get, _mapscript.scalebarObj_intervals_set)
    label = _swig_property(_mapscript.scalebarObj_label_get, _mapscript.scalebarObj_label_set)
    color = _swig_property(_mapscript.scalebarObj_color_get, _mapscript.scalebarObj_color_set)
    backgroundcolor = _swig_property(_mapscript.scalebarObj_backgroundcolor_get, _mapscript.scalebarObj_backgroundcolor_set)
    outlinecolor = _swig_property(_mapscript.scalebarObj_outlinecolor_get, _mapscript.scalebarObj_outlinecolor_set)
    units = _swig_property(_mapscript.scalebarObj_units_get, _mapscript.scalebarObj_units_set)
    status = _swig_property(_mapscript.scalebarObj_status_get, _mapscript.scalebarObj_status_set)
    position = _swig_property(_mapscript.scalebarObj_position_get, _mapscript.scalebarObj_position_set)
    postlabelcache = _swig_property(_mapscript.scalebarObj_postlabelcache_get, _mapscript.scalebarObj_postlabelcache_set)
    align = _swig_property(_mapscript.scalebarObj_align_get, _mapscript.scalebarObj_align_set)
    def updateFromString(self, *args): return _mapscript.scalebarObj_updateFromString(self, *args)
    def __init__(self): 
        this = _mapscript.new_scalebarObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_scalebarObj
    __del__ = lambda self : None;
scalebarObj_swigregister = _mapscript.scalebarObj_swigregister
scalebarObj_swigregister(scalebarObj)

class legendObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    imagecolor = _swig_property(_mapscript.legendObj_imagecolor_get, _mapscript.legendObj_imagecolor_set)
    label = _swig_property(_mapscript.legendObj_label_get)
    keysizex = _swig_property(_mapscript.legendObj_keysizex_get, _mapscript.legendObj_keysizex_set)
    keysizey = _swig_property(_mapscript.legendObj_keysizey_get, _mapscript.legendObj_keysizey_set)
    keyspacingx = _swig_property(_mapscript.legendObj_keyspacingx_get, _mapscript.legendObj_keyspacingx_set)
    keyspacingy = _swig_property(_mapscript.legendObj_keyspacingy_get, _mapscript.legendObj_keyspacingy_set)
    outlinecolor = _swig_property(_mapscript.legendObj_outlinecolor_get, _mapscript.legendObj_outlinecolor_set)
    status = _swig_property(_mapscript.legendObj_status_get, _mapscript.legendObj_status_set)
    height = _swig_property(_mapscript.legendObj_height_get, _mapscript.legendObj_height_set)
    width = _swig_property(_mapscript.legendObj_width_get, _mapscript.legendObj_width_set)
    position = _swig_property(_mapscript.legendObj_position_get, _mapscript.legendObj_position_set)
    postlabelcache = _swig_property(_mapscript.legendObj_postlabelcache_get, _mapscript.legendObj_postlabelcache_set)
    template = _swig_property(_mapscript.legendObj_template_get, _mapscript.legendObj_template_set)
    map = _swig_property(_mapscript.legendObj_map_get)
    def updateFromString(self, *args): return _mapscript.legendObj_updateFromString(self, *args)
    def __init__(self): 
        this = _mapscript.new_legendObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_legendObj
    __del__ = lambda self : None;
legendObj_swigregister = _mapscript.legendObj_swigregister
legendObj_swigregister(legendObj)

class layerObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    classitem = _swig_property(_mapscript.layerObj_classitem_get, _mapscript.layerObj_classitem_set)
    refcount = _swig_property(_mapscript.layerObj_refcount_get)
    numclasses = _swig_property(_mapscript.layerObj_numclasses_get)
    maxclasses = _swig_property(_mapscript.layerObj_maxclasses_get)
    index = _swig_property(_mapscript.layerObj_index_get)
    map = _swig_property(_mapscript.layerObj_map_get)
    header = _swig_property(_mapscript.layerObj_header_get, _mapscript.layerObj_header_set)
    footer = _swig_property(_mapscript.layerObj_footer_get, _mapscript.layerObj_footer_set)
    template = _swig_property(_mapscript.layerObj_template_get, _mapscript.layerObj_template_set)
    name = _swig_property(_mapscript.layerObj_name_get, _mapscript.layerObj_name_set)
    group = _swig_property(_mapscript.layerObj_group_get, _mapscript.layerObj_group_set)
    status = _swig_property(_mapscript.layerObj_status_get, _mapscript.layerObj_status_set)
    data = _swig_property(_mapscript.layerObj_data_get, _mapscript.layerObj_data_set)
    type = _swig_property(_mapscript.layerObj_type_get, _mapscript.layerObj_type_set)
    tolerance = _swig_property(_mapscript.layerObj_tolerance_get, _mapscript.layerObj_tolerance_set)
    toleranceunits = _swig_property(_mapscript.layerObj_toleranceunits_get, _mapscript.layerObj_toleranceunits_set)
    symbolscaledenom = _swig_property(_mapscript.layerObj_symbolscaledenom_get, _mapscript.layerObj_symbolscaledenom_set)
    minscaledenom = _swig_property(_mapscript.layerObj_minscaledenom_get, _mapscript.layerObj_minscaledenom_set)
    maxscaledenom = _swig_property(_mapscript.layerObj_maxscaledenom_get, _mapscript.layerObj_maxscaledenom_set)
    labelminscaledenom = _swig_property(_mapscript.layerObj_labelminscaledenom_get, _mapscript.layerObj_labelminscaledenom_set)
    labelmaxscaledenom = _swig_property(_mapscript.layerObj_labelmaxscaledenom_get, _mapscript.layerObj_labelmaxscaledenom_set)
    mingeowidth = _swig_property(_mapscript.layerObj_mingeowidth_get, _mapscript.layerObj_mingeowidth_set)
    maxgeowidth = _swig_property(_mapscript.layerObj_maxgeowidth_get, _mapscript.layerObj_maxgeowidth_set)
    sizeunits = _swig_property(_mapscript.layerObj_sizeunits_get, _mapscript.layerObj_sizeunits_set)
    maxfeatures = _swig_property(_mapscript.layerObj_maxfeatures_get, _mapscript.layerObj_maxfeatures_set)
    startindex = _swig_property(_mapscript.layerObj_startindex_get, _mapscript.layerObj_startindex_set)
    offsite = _swig_property(_mapscript.layerObj_offsite_get, _mapscript.layerObj_offsite_set)
    transform = _swig_property(_mapscript.layerObj_transform_get, _mapscript.layerObj_transform_set)
    labelcache = _swig_property(_mapscript.layerObj_labelcache_get, _mapscript.layerObj_labelcache_set)
    postlabelcache = _swig_property(_mapscript.layerObj_postlabelcache_get, _mapscript.layerObj_postlabelcache_set)
    labelitem = _swig_property(_mapscript.layerObj_labelitem_get, _mapscript.layerObj_labelitem_set)
    tileitem = _swig_property(_mapscript.layerObj_tileitem_get, _mapscript.layerObj_tileitem_set)
    tileindex = _swig_property(_mapscript.layerObj_tileindex_get, _mapscript.layerObj_tileindex_set)
    units = _swig_property(_mapscript.layerObj_units_get, _mapscript.layerObj_units_set)
    connection = _swig_property(_mapscript.layerObj_connection_get, _mapscript.layerObj_connection_set)
    plugin_library = _swig_property(_mapscript.layerObj_plugin_library_get, _mapscript.layerObj_plugin_library_set)
    plugin_library_original = _swig_property(_mapscript.layerObj_plugin_library_original_get, _mapscript.layerObj_plugin_library_original_set)
    connectiontype = _swig_property(_mapscript.layerObj_connectiontype_get, _mapscript.layerObj_connectiontype_set)
    numitems = _swig_property(_mapscript.layerObj_numitems_get)
    bandsitem = _swig_property(_mapscript.layerObj_bandsitem_get, _mapscript.layerObj_bandsitem_set)
    filteritem = _swig_property(_mapscript.layerObj_filteritem_get, _mapscript.layerObj_filteritem_set)
    styleitem = _swig_property(_mapscript.layerObj_styleitem_get, _mapscript.layerObj_styleitem_set)
    requires = _swig_property(_mapscript.layerObj_requires_get, _mapscript.layerObj_requires_set)
    labelrequires = _swig_property(_mapscript.layerObj_labelrequires_get, _mapscript.layerObj_labelrequires_set)
    metadata = _swig_property(_mapscript.layerObj_metadata_get)
    validation = _swig_property(_mapscript.layerObj_validation_get)
    opacity = _swig_property(_mapscript.layerObj_opacity_get, _mapscript.layerObj_opacity_set)
    dump = _swig_property(_mapscript.layerObj_dump_get, _mapscript.layerObj_dump_set)
    debug = _swig_property(_mapscript.layerObj_debug_get, _mapscript.layerObj_debug_set)
    extent = _swig_property(_mapscript.layerObj_extent_get)
    numprocessing = _swig_property(_mapscript.layerObj_numprocessing_get)
    numjoins = _swig_property(_mapscript.layerObj_numjoins_get)
    classgroup = _swig_property(_mapscript.layerObj_classgroup_get, _mapscript.layerObj_classgroup_set)
    def __init__(self, map = None): 
        this = _mapscript.new_layerObj(map)
        try: self.this.append(this)
        except: self.this = this
        if 1:
        	  if args and len(args)!=0:
        		self.p_map=args[0]
        	  else:
        		self.p_map=None


    __swig_destroy__ = _mapscript.delete_layerObj
    __del__ = lambda self : None;
    def clone(self): return _mapscript.layerObj_clone(self)
    def updateFromString(self, *args): return _mapscript.layerObj_updateFromString(self, *args)
    def insertClass(*args):
           actualIndex=_mapscript.layerObj_insertClass(*args)
           args[1].p_layer=args[0]
           return actualIndex

    def removeClass(self, *args): return _mapscript.layerObj_removeClass(self, *args)
    def open(self): return _mapscript.layerObj_open(self)
    def whichShapes(self, *args): return _mapscript.layerObj_whichShapes(self, *args)
    def nextShape(self): return _mapscript.layerObj_nextShape(self)
    def close(self): return _mapscript.layerObj_close(self)
    def getFeature(self, *args): return _mapscript.layerObj_getFeature(self, *args)
    def getShape(self, *args): return _mapscript.layerObj_getShape(self, *args)
    def resultsGetShape(self, *args): return _mapscript.layerObj_resultsGetShape(self, *args)
    def getNumResults(self): return _mapscript.layerObj_getNumResults(self)
    def getResult(self, *args): return _mapscript.layerObj_getResult(self, *args)
    def getClass(*args):
    	clazz = _mapscript.layerObj_getClass(*args)
    	if clazz:
    		if args and len(args)!=0:
    			clazz.p_layer=args[0]
    		else:
    			clazz.p_layer=None
    	return clazz

    def getItem(self, *args): return _mapscript.layerObj_getItem(self, *args)
    def draw(self, *args): return _mapscript.layerObj_draw(self, *args)
    def drawQuery(self, *args): return _mapscript.layerObj_drawQuery(self, *args)
    def queryByAttributes(self, *args): return _mapscript.layerObj_queryByAttributes(self, *args)
    def queryByPoint(self, *args): return _mapscript.layerObj_queryByPoint(self, *args)
    def queryByRect(self, *args): return _mapscript.layerObj_queryByRect(self, *args)
    def queryByFeatures(self, *args): return _mapscript.layerObj_queryByFeatures(self, *args)
    def queryByShape(self, *args): return _mapscript.layerObj_queryByShape(self, *args)
    def queryByIndex(self, *args): return _mapscript.layerObj_queryByIndex(self, *args)
    def getResults(self, *args): return _mapscript.layerObj_getResults(self, *args)
    def setFilter(self, *args): return _mapscript.layerObj_setFilter(self, *args)
    def getFilterString(self): return _mapscript.layerObj_getFilterString(self)
    def setWKTProjection(self, *args): return _mapscript.layerObj_setWKTProjection(self, *args)
    def getProjection(self): return _mapscript.layerObj_getProjection(self)
    def setProjection(self, *args): return _mapscript.layerObj_setProjection(self, *args)
    def addFeature(self, *args): return _mapscript.layerObj_addFeature(self, *args)
    def getNumFeatures(self): return _mapscript.layerObj_getNumFeatures(self)
    def getExtent(self): return _mapscript.layerObj_getExtent(self)
    def setExtent(self, *args): return _mapscript.layerObj_setExtent(self, *args)
    def getMetaData(self, *args): return _mapscript.layerObj_getMetaData(self, *args)
    def setMetaData(self, *args): return _mapscript.layerObj_setMetaData(self, *args)
    def removeMetaData(self, *args): return _mapscript.layerObj_removeMetaData(self, *args)
    def getFirstMetaDataKey(self): return _mapscript.layerObj_getFirstMetaDataKey(self)
    def getNextMetaDataKey(self, *args): return _mapscript.layerObj_getNextMetaDataKey(self, *args)
    def getWMSFeatureInfoURL(self, *args): return _mapscript.layerObj_getWMSFeatureInfoURL(self, *args)
    def executeWFSGetFeature(self, *args): return _mapscript.layerObj_executeWFSGetFeature(self, *args)
    def applySLD(self, *args): return _mapscript.layerObj_applySLD(self, *args)
    def applySLDURL(self, *args): return _mapscript.layerObj_applySLDURL(self, *args)
    def generateSLD(self): return _mapscript.layerObj_generateSLD(self)
    def isVisible(self): return _mapscript.layerObj_isVisible(self)
    def moveClassUp(self, *args): return _mapscript.layerObj_moveClassUp(self, *args)
    def moveClassDown(self, *args): return _mapscript.layerObj_moveClassDown(self, *args)
    def setProcessingKey(self, *args): return _mapscript.layerObj_setProcessingKey(self, *args)
    def setProcessing(self, *args): return _mapscript.layerObj_setProcessing(self, *args)
    def addProcessing(self, *args): return _mapscript.layerObj_addProcessing(self, *args)
    def getProcessing(self, *args): return _mapscript.layerObj_getProcessing(self, *args)
    def getProcessingKey(self, *args): return _mapscript.layerObj_getProcessingKey(self, *args)
    def clearProcessing(self): return _mapscript.layerObj_clearProcessing(self)
    def setConnectionType(self, *args): return _mapscript.layerObj_setConnectionType(self, *args)
layerObj_swigregister = _mapscript.layerObj_swigregister
layerObj_swigregister(layerObj)

class mapObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_mapscript.mapObj_name_get, _mapscript.mapObj_name_set)
    status = _swig_property(_mapscript.mapObj_status_get, _mapscript.mapObj_status_set)
    height = _swig_property(_mapscript.mapObj_height_get, _mapscript.mapObj_height_set)
    width = _swig_property(_mapscript.mapObj_width_get, _mapscript.mapObj_width_set)
    maxsize = _swig_property(_mapscript.mapObj_maxsize_get, _mapscript.mapObj_maxsize_set)
    refcount = _swig_property(_mapscript.mapObj_refcount_get)
    numlayers = _swig_property(_mapscript.mapObj_numlayers_get)
    maxlayers = _swig_property(_mapscript.mapObj_maxlayers_get)
    symbolset = _swig_property(_mapscript.mapObj_symbolset_get)
    fontset = _swig_property(_mapscript.mapObj_fontset_get)
    labelcache = _swig_property(_mapscript.mapObj_labelcache_get)
    transparent = _swig_property(_mapscript.mapObj_transparent_get, _mapscript.mapObj_transparent_set)
    interlace = _swig_property(_mapscript.mapObj_interlace_get, _mapscript.mapObj_interlace_set)
    imagequality = _swig_property(_mapscript.mapObj_imagequality_get, _mapscript.mapObj_imagequality_set)
    extent = _swig_property(_mapscript.mapObj_extent_get, _mapscript.mapObj_extent_set)
    cellsize = _swig_property(_mapscript.mapObj_cellsize_get, _mapscript.mapObj_cellsize_set)
    units = _swig_property(_mapscript.mapObj_units_get, _mapscript.mapObj_units_set)
    scaledenom = _swig_property(_mapscript.mapObj_scaledenom_get, _mapscript.mapObj_scaledenom_set)
    resolution = _swig_property(_mapscript.mapObj_resolution_get, _mapscript.mapObj_resolution_set)
    defresolution = _swig_property(_mapscript.mapObj_defresolution_get, _mapscript.mapObj_defresolution_set)
    shapepath = _swig_property(_mapscript.mapObj_shapepath_get, _mapscript.mapObj_shapepath_set)
    mappath = _swig_property(_mapscript.mapObj_mappath_get, _mapscript.mapObj_mappath_set)
    imagecolor = _swig_property(_mapscript.mapObj_imagecolor_get, _mapscript.mapObj_imagecolor_set)
    numoutputformats = _swig_property(_mapscript.mapObj_numoutputformats_get)
    outputformatlist = _swig_property(_mapscript.mapObj_outputformatlist_get)
    outputformat = _swig_property(_mapscript.mapObj_outputformat_get)
    imagetype = _swig_property(_mapscript.mapObj_imagetype_get)
    reference = _swig_property(_mapscript.mapObj_reference_get)
    scalebar = _swig_property(_mapscript.mapObj_scalebar_get)
    legend = _swig_property(_mapscript.mapObj_legend_get)
    querymap = _swig_property(_mapscript.mapObj_querymap_get)
    web = _swig_property(_mapscript.mapObj_web_get)
    layerorder = _swig_property(_mapscript.mapObj_layerorder_get, _mapscript.mapObj_layerorder_set)
    debug = _swig_property(_mapscript.mapObj_debug_get, _mapscript.mapObj_debug_set)
    datapattern = _swig_property(_mapscript.mapObj_datapattern_get, _mapscript.mapObj_datapattern_set)
    templatepattern = _swig_property(_mapscript.mapObj_templatepattern_get, _mapscript.mapObj_templatepattern_set)
    configoptions = _swig_property(_mapscript.mapObj_configoptions_get)
    def __init__(self, filename = ""): 
        this = _mapscript.new_mapObj(filename)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_mapObj
    __del__ = lambda self : None;
    def clone(self): return _mapscript.mapObj_clone(self)
    def insertLayer(*args):
           actualIndex=_mapscript.mapObj_insertLayer(*args)
           args[1].p_map=args[0]
           return actualIndex

    def removeLayer(self, *args): return _mapscript.mapObj_removeLayer(self, *args)
    def setExtent(self, *args): return _mapscript.mapObj_setExtent(self, *args)
    def offsetExtent(self, *args): return _mapscript.mapObj_offsetExtent(self, *args)
    def scaleExtent(self, *args): return _mapscript.mapObj_scaleExtent(self, *args)
    def setCenter(self, *args): return _mapscript.mapObj_setCenter(self, *args)
    def setSize(self, *args): return _mapscript.mapObj_setSize(self, *args)
    def setRotation(self, *args): return _mapscript.mapObj_setRotation(self, *args)
    def getLayer(*args):
    	layer = _mapscript.mapObj_getLayer(*args)
    	if layer:
    		if args and len(args)!=0:
    			layer.p_map=args[0]
    		else:
    			layer.p_map=None
    	return layer

    def getLayerByName(*args):
    	layer = _mapscript.mapObj_getLayerByName(*args)
    	if layer:
    		if args and len(args)!=0:
    			layer.p_map=args[0]
    		else:
    			layer.p_map=None
    	return layer

    def getSymbolByName(self, *args): return _mapscript.mapObj_getSymbolByName(self, *args)
    def prepareQuery(self): return _mapscript.mapObj_prepareQuery(self)
    def prepareImage(self): return _mapscript.mapObj_prepareImage(self)
    def setImageType(self, *args): return _mapscript.mapObj_setImageType(self, *args)
    def selectOutputFormat(self, *args): return _mapscript.mapObj_selectOutputFormat(self, *args)
    def setOutputFormat(self, *args): return _mapscript.mapObj_setOutputFormat(self, *args)
    def draw(self): return _mapscript.mapObj_draw(self)
    def drawQuery(self): return _mapscript.mapObj_drawQuery(self)
    def drawLegend(self): return _mapscript.mapObj_drawLegend(self)
    def drawScalebar(self): return _mapscript.mapObj_drawScalebar(self)
    def drawReferenceMap(self): return _mapscript.mapObj_drawReferenceMap(self)
    def embedScalebar(self, *args): return _mapscript.mapObj_embedScalebar(self, *args)
    def embedLegend(self, *args): return _mapscript.mapObj_embedLegend(self, *args)
    def drawLabelCache(self, *args): return _mapscript.mapObj_drawLabelCache(self, *args)
    def getLabel(self, *args): return _mapscript.mapObj_getLabel(self, *args)
    def nextLabel(self): return _mapscript.mapObj_nextLabel(self)
    def queryByPoint(self, *args): return _mapscript.mapObj_queryByPoint(self, *args)
    def queryByRect(self, *args): return _mapscript.mapObj_queryByRect(self, *args)
    def queryByFeatures(self, *args): return _mapscript.mapObj_queryByFeatures(self, *args)
    def queryByShape(self, *args): return _mapscript.mapObj_queryByShape(self, *args)
    def setWKTProjection(self, *args): return _mapscript.mapObj_setWKTProjection(self, *args)
    def getProjection(self): return _mapscript.mapObj_getProjection(self)
    def setProjection(self, *args): return _mapscript.mapObj_setProjection(self, *args)
    def save(self, *args): return _mapscript.mapObj_save(self, *args)
    def saveQuery(self, *args): return _mapscript.mapObj_saveQuery(self, *args)
    def loadQuery(self, *args): return _mapscript.mapObj_loadQuery(self, *args)
    def freeQuery(self, *args): return _mapscript.mapObj_freeQuery(self, *args)
    def saveQueryAsGML(self, *args): return _mapscript.mapObj_saveQueryAsGML(self, *args)
    def getMetaData(self, *args): return _mapscript.mapObj_getMetaData(self, *args)
    def setMetaData(self, *args): return _mapscript.mapObj_setMetaData(self, *args)
    def removeMetaData(self, *args): return _mapscript.mapObj_removeMetaData(self, *args)
    def getFirstMetaDataKey(self): return _mapscript.mapObj_getFirstMetaDataKey(self)
    def getNextMetaDataKey(self, *args): return _mapscript.mapObj_getNextMetaDataKey(self, *args)
    def setSymbolSet(self, *args): return _mapscript.mapObj_setSymbolSet(self, *args)
    def getNumSymbols(self): return _mapscript.mapObj_getNumSymbols(self)
    def setFontSet(self, *args): return _mapscript.mapObj_setFontSet(self, *args)
    def saveMapContext(self, *args): return _mapscript.mapObj_saveMapContext(self, *args)
    def loadMapContext(self, *args): return _mapscript.mapObj_loadMapContext(self, *args)
    def moveLayerUp(self, *args): return _mapscript.mapObj_moveLayerUp(self, *args)
    def moveLayerDown(self, *args): return _mapscript.mapObj_moveLayerDown(self, *args)
    def getLayersDrawingOrder(self): return _mapscript.mapObj_getLayersDrawingOrder(self)
    def setLayersDrawingOrder(self, *args): return _mapscript.mapObj_setLayersDrawingOrder(self, *args)
    def setConfigOption(self, *args): return _mapscript.mapObj_setConfigOption(self, *args)
    def getConfigOption(self, *args): return _mapscript.mapObj_getConfigOption(self, *args)
    def applyConfigOptions(self): return _mapscript.mapObj_applyConfigOptions(self)
    def applySLD(self, *args): return _mapscript.mapObj_applySLD(self, *args)
    def applySLDURL(self, *args): return _mapscript.mapObj_applySLDURL(self, *args)
    def generateSLD(self): return _mapscript.mapObj_generateSLD(self)
    def processTemplate(self, *args): return _mapscript.mapObj_processTemplate(self, *args)
    def processLegendTemplate(self, *args): return _mapscript.mapObj_processLegendTemplate(self, *args)
    def processQueryTemplate(self, *args): return _mapscript.mapObj_processQueryTemplate(self, *args)
    def getOutputFormatByName(self, *args): return _mapscript.mapObj_getOutputFormatByName(self, *args)
    def appendOutputFormat(self, *args): return _mapscript.mapObj_appendOutputFormat(self, *args)
    def removeOutputFormat(self, *args): return _mapscript.mapObj_removeOutputFormat(self, *args)
    def loadOWSParameters(self, *args): return _mapscript.mapObj_loadOWSParameters(self, *args)
    def OWSDispatch(self, *args): return _mapscript.mapObj_OWSDispatch(self, *args)
    def zoomPoint(self, *args): return _mapscript.mapObj_zoomPoint(self, *args)
    def zoomRectangle(self, *args): return _mapscript.mapObj_zoomRectangle(self, *args)
    def zoomScale(self, *args): return _mapscript.mapObj_zoomScale(self, *args)
    def getLayerOrder(self): return _mapscript.mapObj_getLayerOrder(self)
    def setLayerOrder(self, *args): return _mapscript.mapObj_setLayerOrder(self, *args)
    def getSize(self): return _mapscript.mapObj_getSize(self)
    def get_height(self):
        return self.getSize()[1] # <-- second member is the height
    def get_width(self):
        return self.getSize()[0] # <-- first member is the width
    def set_height(self, value):
        return self.setSize(self.getSize()[0], value)
    def set_width(self, value):
        return self.setSize(value, self.getSize()[1])
    width = property(get_width, set_width)
    height = property(get_height, set_height)


mapObj_swigregister = _mapscript.mapObj_swigregister
mapObj_swigregister(mapObj)

class imageObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    width = _swig_property(_mapscript.imageObj_width_get)
    height = _swig_property(_mapscript.imageObj_height_get)
    resolution = _swig_property(_mapscript.imageObj_resolution_get)
    resolutionfactor = _swig_property(_mapscript.imageObj_resolutionfactor_get)
    imagepath = _swig_property(_mapscript.imageObj_imagepath_get)
    imageurl = _swig_property(_mapscript.imageObj_imageurl_get)
    format = _swig_property(_mapscript.imageObj_format_get)
    buffer_format = _swig_property(_mapscript.imageObj_buffer_format_get)
    renderer = _swig_property(_mapscript.imageObj_renderer_get, _mapscript.imageObj_renderer_set)
    __swig_destroy__ = _mapscript.delete_imageObj
    __del__ = lambda self : None;
    def save(self, *args): return _mapscript.imageObj_save(self, *args)
    def getBytes(self): return _mapscript.imageObj_getBytes(self)
    def getSize(self): return _mapscript.imageObj_getSize(self)
    def __init__(self, *args): 
        this = _mapscript.new_imageObj(*args)
        try: self.this.append(this)
        except: self.this = this
    def write(self, *args): return _mapscript.imageObj_write(self, *args)
    def saveToString(self): return _mapscript.imageObj_saveToString(self)
imageObj_swigregister = _mapscript.imageObj_swigregister
imageObj_swigregister(imageObj)


def msSaveImage(*args):
  return _mapscript.msSaveImage(*args)
msSaveImage = _mapscript.msSaveImage

def msFreeImage(*args):
  return _mapscript.msFreeImage(*args)
msFreeImage = _mapscript.msFreeImage

def msSetup():
  return _mapscript.msSetup()
msSetup = _mapscript.msSetup

def msCleanup():
  return _mapscript.msCleanup()
msCleanup = _mapscript.msCleanup

def msLoadMapFromString(*args):
  return _mapscript.msLoadMapFromString(*args)
msLoadMapFromString = _mapscript.msLoadMapFromString
class strokeStyleObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    width = _swig_property(_mapscript.strokeStyleObj_width_get, _mapscript.strokeStyleObj_width_set)
    patternlength = _swig_property(_mapscript.strokeStyleObj_patternlength_get, _mapscript.strokeStyleObj_patternlength_set)
    pattern = _swig_property(_mapscript.strokeStyleObj_pattern_get, _mapscript.strokeStyleObj_pattern_set)
    color = _swig_property(_mapscript.strokeStyleObj_color_get, _mapscript.strokeStyleObj_color_set)
    linecap = _swig_property(_mapscript.strokeStyleObj_linecap_get, _mapscript.strokeStyleObj_linecap_set)
    linejoin = _swig_property(_mapscript.strokeStyleObj_linejoin_get, _mapscript.strokeStyleObj_linejoin_set)
    linejoinmaxsize = _swig_property(_mapscript.strokeStyleObj_linejoinmaxsize_get, _mapscript.strokeStyleObj_linejoinmaxsize_set)
    def __init__(self): 
        this = _mapscript.new_strokeStyleObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_strokeStyleObj
    __del__ = lambda self : None;
strokeStyleObj_swigregister = _mapscript.strokeStyleObj_swigregister
strokeStyleObj_swigregister(strokeStyleObj)

class fillStyleObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    color = _swig_property(_mapscript.fillStyleObj_color_get, _mapscript.fillStyleObj_color_set)
    tile = _swig_property(_mapscript.fillStyleObj_tile_get, _mapscript.fillStyleObj_tile_set)
    def __init__(self): 
        this = _mapscript.new_fillStyleObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_fillStyleObj
    __del__ = lambda self : None;
fillStyleObj_swigregister = _mapscript.fillStyleObj_swigregister
fillStyleObj_swigregister(fillStyleObj)

class symbolStyleObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    color = _swig_property(_mapscript.symbolStyleObj_color_get, _mapscript.symbolStyleObj_color_set)
    backgroundcolor = _swig_property(_mapscript.symbolStyleObj_backgroundcolor_get, _mapscript.symbolStyleObj_backgroundcolor_set)
    outlinewidth = _swig_property(_mapscript.symbolStyleObj_outlinewidth_get, _mapscript.symbolStyleObj_outlinewidth_set)
    outlinecolor = _swig_property(_mapscript.symbolStyleObj_outlinecolor_get, _mapscript.symbolStyleObj_outlinecolor_set)
    scale = _swig_property(_mapscript.symbolStyleObj_scale_get, _mapscript.symbolStyleObj_scale_set)
    rotation = _swig_property(_mapscript.symbolStyleObj_rotation_get, _mapscript.symbolStyleObj_rotation_set)
    def __init__(self): 
        this = _mapscript.new_symbolStyleObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_symbolStyleObj
    __del__ = lambda self : None;
symbolStyleObj_swigregister = _mapscript.symbolStyleObj_swigregister
symbolStyleObj_swigregister(symbolStyleObj)

class tilecache(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    symbol = _swig_property(_mapscript.tilecache_symbol_get, _mapscript.tilecache_symbol_set)
    style = _swig_property(_mapscript.tilecache_style_get, _mapscript.tilecache_style_set)
    width = _swig_property(_mapscript.tilecache_width_get, _mapscript.tilecache_width_set)
    height = _swig_property(_mapscript.tilecache_height_get, _mapscript.tilecache_height_set)
    data = _swig_property(_mapscript.tilecache_data_get, _mapscript.tilecache_data_set)
    next = _swig_property(_mapscript.tilecache_next_get, _mapscript.tilecache_next_set)
    def __init__(self): 
        this = _mapscript.new_tilecache()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_tilecache
    __del__ = lambda self : None;
tilecache_swigregister = _mapscript.tilecache_swigregister
tilecache_swigregister(tilecache)

class labelStyleObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    font = _swig_property(_mapscript.labelStyleObj_font_get, _mapscript.labelStyleObj_font_set)
    size = _swig_property(_mapscript.labelStyleObj_size_get, _mapscript.labelStyleObj_size_set)
    rotation = _swig_property(_mapscript.labelStyleObj_rotation_get, _mapscript.labelStyleObj_rotation_set)
    color = _swig_property(_mapscript.labelStyleObj_color_get, _mapscript.labelStyleObj_color_set)
    outlinewidth = _swig_property(_mapscript.labelStyleObj_outlinewidth_get, _mapscript.labelStyleObj_outlinewidth_set)
    outlinecolor = _swig_property(_mapscript.labelStyleObj_outlinecolor_get, _mapscript.labelStyleObj_outlinecolor_set)
    shadowsizex = _swig_property(_mapscript.labelStyleObj_shadowsizex_get, _mapscript.labelStyleObj_shadowsizex_set)
    shadowsizey = _swig_property(_mapscript.labelStyleObj_shadowsizey_get, _mapscript.labelStyleObj_shadowsizey_set)
    shadowcolor = _swig_property(_mapscript.labelStyleObj_shadowcolor_get, _mapscript.labelStyleObj_shadowcolor_set)
    def __init__(self): 
        this = _mapscript.new_labelStyleObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_labelStyleObj
    __del__ = lambda self : None;
labelStyleObj_swigregister = _mapscript.labelStyleObj_swigregister
labelStyleObj_swigregister(labelStyleObj)

class rectObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    minx = _swig_property(_mapscript.rectObj_minx_get, _mapscript.rectObj_minx_set)
    miny = _swig_property(_mapscript.rectObj_miny_get, _mapscript.rectObj_miny_set)
    maxx = _swig_property(_mapscript.rectObj_maxx_get, _mapscript.rectObj_maxx_set)
    maxy = _swig_property(_mapscript.rectObj_maxy_get, _mapscript.rectObj_maxy_set)
    def __init__(self, *args): 
        this = _mapscript.new_rectObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_rectObj
    __del__ = lambda self : None;
    def project(self, *args): return _mapscript.rectObj_project(self, *args)
    def fit(self, *args): return _mapscript.rectObj_fit(self, *args)
    def draw(self, *args): return _mapscript.rectObj_draw(self, *args)
    def getCenter(self): return _mapscript.rectObj_getCenter(self)
    def toPolygon(self): return _mapscript.rectObj_toPolygon(self)
    def toString(self): return _mapscript.rectObj_toString(self)
    def __str__(self):
        return self.toString()
        
    def __contains__(self, item):
        item_type = str(type(item))
        if item_type == "<class 'mapscript.pointObj'>":
            if item.x >= self.minx and item.x <= self.maxx \
            and item.y >= self.miny and item.y <= self.maxy:
                return True
            else:
                return False
        else:
            raise TypeError, \
                '__contains__ does not yet handle %s' % (item_type)
        

rectObj_swigregister = _mapscript.rectObj_swigregister
rectObj_swigregister(rectObj)

class pointObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_mapscript.pointObj_x_get, _mapscript.pointObj_x_set)
    y = _swig_property(_mapscript.pointObj_y_get, _mapscript.pointObj_y_set)
    def __init__(self, *args): 
        this = _mapscript.new_pointObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_pointObj
    __del__ = lambda self : None;
    def project(self, *args): return _mapscript.pointObj_project(self, *args)
    def draw(self, *args): return _mapscript.pointObj_draw(self, *args)
    def distanceToPoint(self, *args): return _mapscript.pointObj_distanceToPoint(self, *args)
    def distanceToSegment(self, *args): return _mapscript.pointObj_distanceToSegment(self, *args)
    def distanceToShape(self, *args): return _mapscript.pointObj_distanceToShape(self, *args)
    def setXY(self, *args): return _mapscript.pointObj_setXY(self, *args)
    def setXYZ(self, *args): return _mapscript.pointObj_setXYZ(self, *args)
    def setXYZM(self, *args): return _mapscript.pointObj_setXYZM(self, *args)
    def toString(self): return _mapscript.pointObj_toString(self)
    def toShape(self): return _mapscript.pointObj_toShape(self)
    def __str__(self):
        return self.toString()


pointObj_swigregister = _mapscript.pointObj_swigregister
pointObj_swigregister(pointObj)

class lineObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    numpoints = _swig_property(_mapscript.lineObj_numpoints_get)
    point = _swig_property(_mapscript.lineObj_point_get)
    def __init__(self): 
        this = _mapscript.new_lineObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_lineObj
    __del__ = lambda self : None;
    def project(self, *args): return _mapscript.lineObj_project(self, *args)
    def get(self, *args): return _mapscript.lineObj_get(self, *args)
    def add(self, *args): return _mapscript.lineObj_add(self, *args)
    def set(self, *args): return _mapscript.lineObj_set(self, *args)
lineObj_swigregister = _mapscript.lineObj_swigregister
lineObj_swigregister(lineObj)

class shapeObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    numlines = _swig_property(_mapscript.shapeObj_numlines_get)
    numvalues = _swig_property(_mapscript.shapeObj_numvalues_get)
    line = _swig_property(_mapscript.shapeObj_line_get)
    values = _swig_property(_mapscript.shapeObj_values_get)
    bounds = _swig_property(_mapscript.shapeObj_bounds_get, _mapscript.shapeObj_bounds_set)
    type = _swig_property(_mapscript.shapeObj_type_get, _mapscript.shapeObj_type_set)
    index = _swig_property(_mapscript.shapeObj_index_get, _mapscript.shapeObj_index_set)
    tileindex = _swig_property(_mapscript.shapeObj_tileindex_get, _mapscript.shapeObj_tileindex_set)
    classindex = _swig_property(_mapscript.shapeObj_classindex_get, _mapscript.shapeObj_classindex_set)
    text = _swig_property(_mapscript.shapeObj_text_get, _mapscript.shapeObj_text_set)
    def __init__(self, *args): 
        this = _mapscript.new_shapeObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_shapeObj
    __del__ = lambda self : None;
    fromWKT = staticmethod(_mapscript.shapeObj_fromWKT)
    def project(self, *args): return _mapscript.shapeObj_project(self, *args)
    def get(self, *args): return _mapscript.shapeObj_get(self, *args)
    def add(self, *args): return _mapscript.shapeObj_add(self, *args)
    def draw(self, *args): return _mapscript.shapeObj_draw(self, *args)
    def setBounds(self): return _mapscript.shapeObj_setBounds(self)
    def clone(self): return _mapscript.shapeObj_clone(self)
    def copy(self, *args): return _mapscript.shapeObj_copy(self, *args)
    def toWKT(self): return _mapscript.shapeObj_toWKT(self)
    def buffer(self, *args): return _mapscript.shapeObj_buffer(self, *args)
    def simplify(self, *args): return _mapscript.shapeObj_simplify(self, *args)
    def topologyPreservingSimplify(self, *args): return _mapscript.shapeObj_topologyPreservingSimplify(self, *args)
    def convexHull(self): return _mapscript.shapeObj_convexHull(self)
    def boundary(self): return _mapscript.shapeObj_boundary(self)
    def getCentroid(self): return _mapscript.shapeObj_getCentroid(self)
    def Union(self, *args): return _mapscript.shapeObj_Union(self, *args)
    def intersection(self, *args): return _mapscript.shapeObj_intersection(self, *args)
    def difference(self, *args): return _mapscript.shapeObj_difference(self, *args)
    def symDifference(self, *args): return _mapscript.shapeObj_symDifference(self, *args)
    def overlaps(self, *args): return _mapscript.shapeObj_overlaps(self, *args)
    def within(self, *args): return _mapscript.shapeObj_within(self, *args)
    def crosses(self, *args): return _mapscript.shapeObj_crosses(self, *args)
    def intersects(self, *args): return _mapscript.shapeObj_intersects(self, *args)
    def touches(self, *args): return _mapscript.shapeObj_touches(self, *args)
    def equals(self, *args): return _mapscript.shapeObj_equals(self, *args)
    def disjoint(self, *args): return _mapscript.shapeObj_disjoint(self, *args)
    def getArea(self): return _mapscript.shapeObj_getArea(self)
    def getLength(self): return _mapscript.shapeObj_getLength(self)
    def getValue(self, *args): return _mapscript.shapeObj_getValue(self, *args)
    def contains(self, *args): return _mapscript.shapeObj_contains(self, *args)
    def distanceToPoint(self, *args): return _mapscript.shapeObj_distanceToPoint(self, *args)
    def distanceToShape(self, *args): return _mapscript.shapeObj_distanceToShape(self, *args)
    def getLabelPoint(self): return _mapscript.shapeObj_getLabelPoint(self)
    def setValue(self, *args): return _mapscript.shapeObj_setValue(self, *args)
    def initValues(self, *args): return _mapscript.shapeObj_initValues(self, *args)
shapeObj_swigregister = _mapscript.shapeObj_swigregister
shapeObj_swigregister(shapeObj)

def shapeObj_fromWKT(*args):
  return _mapscript.shapeObj_fromWKT(*args)
shapeObj_fromWKT = _mapscript.shapeObj_fromWKT

SHX_BUFFER_PAGE = _mapscript.SHX_BUFFER_PAGE
MS_SHAPEFILE_POINT = _mapscript.MS_SHAPEFILE_POINT
MS_SHAPEFILE_ARC = _mapscript.MS_SHAPEFILE_ARC
MS_SHAPEFILE_POLYGON = _mapscript.MS_SHAPEFILE_POLYGON
MS_SHAPEFILE_MULTIPOINT = _mapscript.MS_SHAPEFILE_MULTIPOINT
MS_SHP_POINTZ = _mapscript.MS_SHP_POINTZ
MS_SHP_ARCZ = _mapscript.MS_SHP_ARCZ
MS_SHP_POLYGONZ = _mapscript.MS_SHP_POLYGONZ
MS_SHP_MULTIPOINTZ = _mapscript.MS_SHP_MULTIPOINTZ
MS_SHP_POINTM = _mapscript.MS_SHP_POINTM
MS_SHP_ARCM = _mapscript.MS_SHP_ARCM
MS_SHP_POLYGONM = _mapscript.MS_SHP_POLYGONM
MS_SHP_MULTIPOINTM = _mapscript.MS_SHP_MULTIPOINTM
class DBFInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fp = _swig_property(_mapscript.DBFInfo_fp_get)
    nRecords = _swig_property(_mapscript.DBFInfo_nRecords_get)
    nRecordLength = _swig_property(_mapscript.DBFInfo_nRecordLength_get)
    nHeaderLength = _swig_property(_mapscript.DBFInfo_nHeaderLength_get)
    nFields = _swig_property(_mapscript.DBFInfo_nFields_get)
    panFieldOffset = _swig_property(_mapscript.DBFInfo_panFieldOffset_get)
    panFieldSize = _swig_property(_mapscript.DBFInfo_panFieldSize_get)
    panFieldDecimals = _swig_property(_mapscript.DBFInfo_panFieldDecimals_get)
    pachFieldType = _swig_property(_mapscript.DBFInfo_pachFieldType_get)
    pszHeader = _swig_property(_mapscript.DBFInfo_pszHeader_get)
    nCurrentRecord = _swig_property(_mapscript.DBFInfo_nCurrentRecord_get)
    bCurrentRecordModified = _swig_property(_mapscript.DBFInfo_bCurrentRecordModified_get)
    pszCurrentRecord = _swig_property(_mapscript.DBFInfo_pszCurrentRecord_get)
    bNoHeader = _swig_property(_mapscript.DBFInfo_bNoHeader_get)
    bUpdated = _swig_property(_mapscript.DBFInfo_bUpdated_get)
    pszStringField = _swig_property(_mapscript.DBFInfo_pszStringField_get)
    nStringFieldLen = _swig_property(_mapscript.DBFInfo_nStringFieldLen_get)
    def getFieldName(self, *args): return _mapscript.DBFInfo_getFieldName(self, *args)
    def getFieldWidth(self, *args): return _mapscript.DBFInfo_getFieldWidth(self, *args)
    def getFieldDecimals(self, *args): return _mapscript.DBFInfo_getFieldDecimals(self, *args)
    def getFieldType(self, *args): return _mapscript.DBFInfo_getFieldType(self, *args)
    def __init__(self): 
        this = _mapscript.new_DBFInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_DBFInfo
    __del__ = lambda self : None;
DBFInfo_swigregister = _mapscript.DBFInfo_swigregister
DBFInfo_swigregister(DBFInfo)

FTString = _mapscript.FTString
FTInteger = _mapscript.FTInteger
FTDouble = _mapscript.FTDouble
FTInvalid = _mapscript.FTInvalid
class shapefileObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    source = _swig_property(_mapscript.shapefileObj_source_get)
    type = _swig_property(_mapscript.shapefileObj_type_get)
    numshapes = _swig_property(_mapscript.shapefileObj_numshapes_get)
    bounds = _swig_property(_mapscript.shapefileObj_bounds_get)
    lastshape = _swig_property(_mapscript.shapefileObj_lastshape_get)
    status = _swig_property(_mapscript.shapefileObj_status_get)
    statusbounds = _swig_property(_mapscript.shapefileObj_statusbounds_get)
    isopen = _swig_property(_mapscript.shapefileObj_isopen_get)
    def __init__(self, *args): 
        this = _mapscript.new_shapefileObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_shapefileObj
    __del__ = lambda self : None;
    def get(self, *args): return _mapscript.shapefileObj_get(self, *args)
    def getShape(self, *args): return _mapscript.shapefileObj_getShape(self, *args)
    def getPoint(self, *args): return _mapscript.shapefileObj_getPoint(self, *args)
    def getTransformed(self, *args): return _mapscript.shapefileObj_getTransformed(self, *args)
    def getExtent(self, *args): return _mapscript.shapefileObj_getExtent(self, *args)
    def add(self, *args): return _mapscript.shapefileObj_add(self, *args)
    def addPoint(self, *args): return _mapscript.shapefileObj_addPoint(self, *args)
    def getDBF(self): return _mapscript.shapefileObj_getDBF(self)
shapefileObj_swigregister = _mapscript.shapefileObj_swigregister
shapefileObj_swigregister(shapefileObj)

class projectionObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    numargs = _swig_property(_mapscript.projectionObj_numargs_get)
    def __init__(self, *args): 
        this = _mapscript.new_projectionObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_projectionObj
    __del__ = lambda self : None;
    def setWKTProjection(self, *args): return _mapscript.projectionObj_setWKTProjection(self, *args)
    def getUnits(self): return _mapscript.projectionObj_getUnits(self)
projectionObj_swigregister = _mapscript.projectionObj_swigregister
projectionObj_swigregister(projectionObj)

MS_SYMBOL_SIMPLE = _mapscript.MS_SYMBOL_SIMPLE
MS_SYMBOL_VECTOR = _mapscript.MS_SYMBOL_VECTOR
MS_SYMBOL_ELLIPSE = _mapscript.MS_SYMBOL_ELLIPSE
MS_SYMBOL_PIXMAP = _mapscript.MS_SYMBOL_PIXMAP
MS_SYMBOL_TRUETYPE = _mapscript.MS_SYMBOL_TRUETYPE
MS_SYMBOL_CARTOLINE = _mapscript.MS_SYMBOL_CARTOLINE
MS_SYMBOL_HATCH = _mapscript.MS_SYMBOL_HATCH
MS_SYMBOL_ALLOCSIZE = _mapscript.MS_SYMBOL_ALLOCSIZE
MS_MAXVECTORPOINTS = _mapscript.MS_MAXVECTORPOINTS
MS_MAXPATTERNLENGTH = _mapscript.MS_MAXPATTERNLENGTH
MS_IMAGECACHESIZE = _mapscript.MS_IMAGECACHESIZE
class colorObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pen = _swig_property(_mapscript.colorObj_pen_get, _mapscript.colorObj_pen_set)
    red = _swig_property(_mapscript.colorObj_red_get, _mapscript.colorObj_red_set)
    green = _swig_property(_mapscript.colorObj_green_get, _mapscript.colorObj_green_set)
    blue = _swig_property(_mapscript.colorObj_blue_get, _mapscript.colorObj_blue_set)
    alpha = _swig_property(_mapscript.colorObj_alpha_get, _mapscript.colorObj_alpha_set)
    def __init__(self, *args): 
        this = _mapscript.new_colorObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_colorObj
    __del__ = lambda self : None;
    def setRGB(self, *args): return _mapscript.colorObj_setRGB(self, *args)
    def setHex(self, *args): return _mapscript.colorObj_setHex(self, *args)
    def toHex(self): return _mapscript.colorObj_toHex(self)
colorObj_swigregister = _mapscript.colorObj_swigregister
colorObj_swigregister(colorObj)

class symbolObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_mapscript.symbolObj_name_get, _mapscript.symbolObj_name_set)
    type = _swig_property(_mapscript.symbolObj_type_get, _mapscript.symbolObj_type_set)
    inmapfile = _swig_property(_mapscript.symbolObj_inmapfile_get, _mapscript.symbolObj_inmapfile_set)
    sizex = _swig_property(_mapscript.symbolObj_sizex_get, _mapscript.symbolObj_sizex_set)
    sizey = _swig_property(_mapscript.symbolObj_sizey_get, _mapscript.symbolObj_sizey_set)
    minx = _swig_property(_mapscript.symbolObj_minx_get, _mapscript.symbolObj_minx_set)
    miny = _swig_property(_mapscript.symbolObj_miny_get, _mapscript.symbolObj_miny_set)
    maxx = _swig_property(_mapscript.symbolObj_maxx_get, _mapscript.symbolObj_maxx_set)
    maxy = _swig_property(_mapscript.symbolObj_maxy_get, _mapscript.symbolObj_maxy_set)
    refcount = _swig_property(_mapscript.symbolObj_refcount_get)
    numpoints = _swig_property(_mapscript.symbolObj_numpoints_get)
    filled = _swig_property(_mapscript.symbolObj_filled_get, _mapscript.symbolObj_filled_set)
    patternlength = _swig_property(_mapscript.symbolObj_patternlength_get, _mapscript.symbolObj_patternlength_set)
    pattern = _swig_property(_mapscript.symbolObj_pattern_get, _mapscript.symbolObj_pattern_set)
    imagepath = _swig_property(_mapscript.symbolObj_imagepath_get)
    transparent = _swig_property(_mapscript.symbolObj_transparent_get, _mapscript.symbolObj_transparent_set)
    transparentcolor = _swig_property(_mapscript.symbolObj_transparentcolor_get, _mapscript.symbolObj_transparentcolor_set)
    character = _swig_property(_mapscript.symbolObj_character_get, _mapscript.symbolObj_character_set)
    antialias = _swig_property(_mapscript.symbolObj_antialias_get, _mapscript.symbolObj_antialias_set)
    font = _swig_property(_mapscript.symbolObj_font_get, _mapscript.symbolObj_font_set)
    gap = _swig_property(_mapscript.symbolObj_gap_get, _mapscript.symbolObj_gap_set)
    position = _swig_property(_mapscript.symbolObj_position_get, _mapscript.symbolObj_position_set)
    linecap = _swig_property(_mapscript.symbolObj_linecap_get, _mapscript.symbolObj_linecap_set)
    linejoin = _swig_property(_mapscript.symbolObj_linejoin_get, _mapscript.symbolObj_linejoin_set)
    linejoinmaxsize = _swig_property(_mapscript.symbolObj_linejoinmaxsize_get, _mapscript.symbolObj_linejoinmaxsize_set)
    def __init__(self, *args): 
        this = _mapscript.new_symbolObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_symbolObj
    __del__ = lambda self : None;
    def setImagepath(self, *args): return _mapscript.symbolObj_setImagepath(self, *args)
    def setPoints(self, *args): return _mapscript.symbolObj_setPoints(self, *args)
    def getPoints(self): return _mapscript.symbolObj_getPoints(self)
    def setPattern(self, *args): return _mapscript.symbolObj_setPattern(self, *args)
    def getImage(self, *args): return _mapscript.symbolObj_getImage(self, *args)
    def setImage(self, *args): return _mapscript.symbolObj_setImage(self, *args)
symbolObj_swigregister = _mapscript.symbolObj_swigregister
symbolObj_swigregister(symbolObj)

MS_NOERR = _mapscript.MS_NOERR
MS_IOERR = _mapscript.MS_IOERR
MS_MEMERR = _mapscript.MS_MEMERR
MS_TYPEERR = _mapscript.MS_TYPEERR
MS_SYMERR = _mapscript.MS_SYMERR
MS_REGEXERR = _mapscript.MS_REGEXERR
MS_TTFERR = _mapscript.MS_TTFERR
MS_DBFERR = _mapscript.MS_DBFERR
MS_GDERR = _mapscript.MS_GDERR
MS_IDENTERR = _mapscript.MS_IDENTERR
MS_EOFERR = _mapscript.MS_EOFERR
MS_PROJERR = _mapscript.MS_PROJERR
MS_MISCERR = _mapscript.MS_MISCERR
MS_CGIERR = _mapscript.MS_CGIERR
MS_WEBERR = _mapscript.MS_WEBERR
MS_IMGERR = _mapscript.MS_IMGERR
MS_HASHERR = _mapscript.MS_HASHERR
MS_JOINERR = _mapscript.MS_JOINERR
MS_NOTFOUND = _mapscript.MS_NOTFOUND
MS_SHPERR = _mapscript.MS_SHPERR
MS_PARSEERR = _mapscript.MS_PARSEERR
MS_SDEERR = _mapscript.MS_SDEERR
MS_OGRERR = _mapscript.MS_OGRERR
MS_QUERYERR = _mapscript.MS_QUERYERR
MS_WMSERR = _mapscript.MS_WMSERR
MS_WMSCONNERR = _mapscript.MS_WMSCONNERR
MS_ORACLESPATIALERR = _mapscript.MS_ORACLESPATIALERR
MS_WFSERR = _mapscript.MS_WFSERR
MS_WFSCONNERR = _mapscript.MS_WFSCONNERR
MS_MAPCONTEXTERR = _mapscript.MS_MAPCONTEXTERR
MS_HTTPERR = _mapscript.MS_HTTPERR
MS_CHILDERR = _mapscript.MS_CHILDERR
MS_WCSERR = _mapscript.MS_WCSERR
MS_GEOSERR = _mapscript.MS_GEOSERR
MS_RECTERR = _mapscript.MS_RECTERR
MS_TIMEERR = _mapscript.MS_TIMEERR
MS_GMLERR = _mapscript.MS_GMLERR
MS_SOSERR = _mapscript.MS_SOSERR
MS_NULLPARENTERR = _mapscript.MS_NULLPARENTERR
MS_AGGERR = _mapscript.MS_AGGERR
MS_OWSERR = _mapscript.MS_OWSERR
MS_NUMERRORCODES = _mapscript.MS_NUMERRORCODES
MS_OGLERR = _mapscript.MS_OGLERR
MESSAGELENGTH = _mapscript.MESSAGELENGTH
ROUTINELENGTH = _mapscript.ROUTINELENGTH
MS_ERROR_LANGUAGE = _mapscript.MS_ERROR_LANGUAGE
class errorObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_mapscript.errorObj_code_get, _mapscript.errorObj_code_set)
    routine = _swig_property(_mapscript.errorObj_routine_get, _mapscript.errorObj_routine_set)
    message = _swig_property(_mapscript.errorObj_message_get, _mapscript.errorObj_message_set)
    def __init__(self): 
        this = _mapscript.new_errorObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_errorObj
    __del__ = lambda self : None;
    def next(self): return _mapscript.errorObj_next(self)
errorObj_swigregister = _mapscript.errorObj_swigregister
errorObj_swigregister(errorObj)


def msGetErrorObj():
  return _mapscript.msGetErrorObj()
msGetErrorObj = _mapscript.msGetErrorObj

def msResetErrorList():
  return _mapscript.msResetErrorList()
msResetErrorList = _mapscript.msResetErrorList

def msGetVersion():
  return _mapscript.msGetVersion()
msGetVersion = _mapscript.msGetVersion

def msGetVersionInt():
  return _mapscript.msGetVersionInt()
msGetVersionInt = _mapscript.msGetVersionInt

def msGetErrorString(*args):
  return _mapscript.msGetErrorString(*args)
msGetErrorString = _mapscript.msGetErrorString
MS_DEBUGLEVEL_ERRORSONLY = _mapscript.MS_DEBUGLEVEL_ERRORSONLY
MS_DEBUGLEVEL_DEBUG = _mapscript.MS_DEBUGLEVEL_DEBUG
MS_DEBUGLEVEL_TUNING = _mapscript.MS_DEBUGLEVEL_TUNING
MS_DEBUGLEVEL_V = _mapscript.MS_DEBUGLEVEL_V
MS_DEBUGLEVEL_VV = _mapscript.MS_DEBUGLEVEL_VV
MS_DEBUGLEVEL_VVV = _mapscript.MS_DEBUGLEVEL_VVV
MS_HASHSIZE = _mapscript.MS_HASHSIZE
class hashTableObj(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    numitems = _swig_property(_mapscript.hashTableObj_numitems_get)
    def __init__(self, *args): 
        this = _mapscript.new_hashTableObj(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mapscript.delete_hashTableObj
    __del__ = lambda self : None;
    def set(self, *args): return _mapscript.hashTableObj_set(self, *args)
    def get(self, *args): return _mapscript.hashTableObj_get(self, *args)
    def remove(self, *args): return _mapscript.hashTableObj_remove(self, *args)
    def clear(self, *args): return _mapscript.hashTableObj_clear(self, *args)
    def nextKey(self, prevkey = None): return _mapscript.hashTableObj_nextKey(self, prevkey)
hashTableObj_swigregister = _mapscript.hashTableObj_swigregister
hashTableObj_swigregister(hashTableObj)

MS_MAX_CGI_PARAMS = _mapscript.MS_MAX_CGI_PARAMS
MS_GET_REQUEST = _mapscript.MS_GET_REQUEST
MS_POST_REQUEST = _mapscript.MS_POST_REQUEST
class OWSRequest(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NumParams = _swig_property(_mapscript.OWSRequest_NumParams_get)
    type = _swig_property(_mapscript.OWSRequest_type_get, _mapscript.OWSRequest_type_set)
    contenttype = _swig_property(_mapscript.OWSRequest_contenttype_get, _mapscript.OWSRequest_contenttype_set)
    postrequest = _swig_property(_mapscript.OWSRequest_postrequest_get, _mapscript.OWSRequest_postrequest_set)
    httpcookiedata = _swig_property(_mapscript.OWSRequest_httpcookiedata_get, _mapscript.OWSRequest_httpcookiedata_set)
    def __init__(self, *args): 
        this = _mapscript.new_OWSRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    def loadParams(self): return _mapscript.OWSRequest_loadParams(self)
    def setParameter(self, *args): return _mapscript.OWSRequest_setParameter(self, *args)
    def getName(self, *args): return _mapscript.OWSRequest_getName(self, *args)
    def getValue(self, *args): return _mapscript.OWSRequest_getValue(self, *args)
    def getValueByName(self, *args): return _mapscript.OWSRequest_getValueByName(self, *args)
    __swig_destroy__ = _mapscript.delete_OWSRequest
    __del__ = lambda self : None;
OWSRequest_swigregister = _mapscript.OWSRequest_swigregister
OWSRequest_swigregister(OWSRequest)


def msConnPoolCloseUnreferenced():
  return _mapscript.msConnPoolCloseUnreferenced()
msConnPoolCloseUnreferenced = _mapscript.msConnPoolCloseUnreferenced

def msIO_resetHandlers():
  return _mapscript.msIO_resetHandlers()
msIO_resetHandlers = _mapscript.msIO_resetHandlers

def msIO_installStdoutToBuffer():
  return _mapscript.msIO_installStdoutToBuffer()
msIO_installStdoutToBuffer = _mapscript.msIO_installStdoutToBuffer

def msIO_installStdinFromBuffer():
  return _mapscript.msIO_installStdinFromBuffer()
msIO_installStdinFromBuffer = _mapscript.msIO_installStdinFromBuffer

def msIO_stripStdoutBufferContentType():
  return _mapscript.msIO_stripStdoutBufferContentType()
msIO_stripStdoutBufferContentType = _mapscript.msIO_stripStdoutBufferContentType

def msIO_getStdoutBufferString():
  return _mapscript.msIO_getStdoutBufferString()
msIO_getStdoutBufferString = _mapscript.msIO_getStdoutBufferString

def msIO_getStdoutBufferBytes():
  return _mapscript.msIO_getStdoutBufferBytes()
msIO_getStdoutBufferBytes = _mapscript.msIO_getStdoutBufferBytes
def fromstring(data, mappath=None):
    """Creates map objects from mapfile strings.

    Parameters
    ==========
    data : string
        Mapfile in a string.
    mappath : string
        Optional root map path, enabling relative paths in mapfile.

    Example
    =======
    >>> mo = fromstring("MAP\nNAME 'test'\nEND")
    >>> mo.name
    'test'
    """
    import re
    if re.search("^\s*MAP", data, re.I): 
        return msLoadMapFromString(data, mappath)
    elif re.search("^\s*LAYER", data, re.I):
        ob = layerObj()
        ob.updateFromString(data)
        return ob
    elif re.search("^\s*CLASS", data, re.I):
        ob = classObj()
        ob.updateFromString(data)
        return ob
    elif re.search("^\s*STYLE", data, re.I):
        ob = styleObj()
        ob.updateFromString(data)
        return ob
    else:
        raise ValueError, "No map, layer, class, or style found. Can not load from provided string"



